#!/usr/bin/env python3

import collections
import datetime
import sys

import fpdf

from backend_api.api_views.attendance.models import ATTENDANCE_TYPES

# TODO FPDF does not handle unicode!


class Report(fpdf.FPDF):
    "Base class for all reports"
    #Â this class is not intended to be used directly, instead it should
    # be subclassed by a class that implements populate()

    def __init__(self):
        super().__init__()
        self.add_page()
        self.populate()

    def header(self):
        self.set_font("Times", "", 15)
        self.cell(0, 10, self.header_text, 1, 1, "C")

    def footer(self):
        self.set_y(-15)
        self.set_font("Times", "", 11)
        self.cell(
            0, 10, f"Generated by KMS at {datetime.datetime.now():%Y-%m-%d %H:%M:%S}", 0, 0, "R")

    def add_heading(self, text, size):
        """add a section heading; larger values of `size` display smaller on
        the page, like HTML h1, h2, etc."""

        if size == 1:
            self.set_font("Times", "B", 18)
            self.cell(0, 10, text, 0, 1, "C")
        elif size == 2:
            self.set_font("Times", "B", 15)
            self.cell(0, 10, text, 0, 1, "L")

    def add_key_value_pair(self, key, value, key_width=70):
        "add a key-value pair"
        self.set_font("Times", "B", 11)
        self.cell(key_width, 7, key, 0, 0, "L")

        if isinstance(value, datetime.datetime):
            self.set_font("Times", "", 11)
            self.cell(0, 7, value.strftime("%Y.%m.%d %H:%M:%S"), 0, 1, "L")
        elif isinstance(value, datetime.date):
            self.set_font("Times", "", 11)
            self.cell(0, 7, value.strftime("%Y.%m.%d"), 0, 1, "L")
        elif bool(value):
            self.set_font("Times", "", 11)
            self.cell(0, 7, value, 0, 1, "L")
        else:
            self.set_font("Times", "I", 11)
            self.cell(0, 7, "none", 0, 1, "L")

    def add_attendance_table(self, student_names):
        "add a table for recording attendance"
        COL_WIDTH = 25

        self.set_font("Times", "B", 11)
        self.cell(70, 7, "Student name", 0, 0, "L")
        for status in dict(ATTENDANCE_TYPES):
            self.cell(COL_WIDTH, 7, status, 0, 0, "C")
        self.ln()

        for name in student_names:
            self.set_font("Times", "", 11)
            self.cell(70, 7, name, 0, 0, "L")

            for _ in range(len(ATTENDANCE_TYPES)):
                self.set_x(self.get_x() + (COL_WIDTH - 7) / 2)
                self.cell(7, 7, "", 1, 0, "L")
                self.set_x(self.get_x() + (COL_WIDTH - 7) / 2)

            self.ln()

    def add_handwritten_field(self, prompt):
        "same as a key-value pair but the value is blank"
        self.set_font("Times", "B", 11)
        width = max(self.get_string_width(prompt), 70)
        self.cell(width, 7, prompt, 0, 0, "L")
        self.cell(70, 7, "", "B", 1, "L")

    def add_scores_table(self, start_date, num_days=7, sheets_per_day=1):
        "add a table for recording problem sheet scores"
        self.set_font("Times", "B", 11)
        self.cell(30, 14, "Date", 1, 0, "C")
        self.cell(30, 14, "Time spent", 1, 0, "C")
        self.cell(30, 14, "Worksheet #", 1, 0, "C")
        self.cell(0, 7, "Scores", 1, 1, "C")

        self.set_x(self.get_x() + 90)
        for i in range(1, 10+1):
            self.cell(10, 7, str(i), 1, 0, "C")
        self.ln()

        date = start_date
        for day in range(num_days):
            for sheet in range(sheets_per_day):
                border = "L"
                if sheet == 0:
                    border += "T"
                if sheet == sheets_per_day - 1:
                    border += "B"

                if sheet == 0:
                    content = date.strftime("%Y.%m.%d")
                else:
                    content = ""

                self.cell(20, 7, content, border, 0, "L")

                border = "R"
                if sheet == 0:
                    border += "T"
                if sheet == sheets_per_day - 1:
                    border += "B"

                if sheet == 0:
                    content = date.strftime("%a")
                else:
                    content = ""
                self.cell(10, 7, content, border, 0, "L")

                self.cell(30, 7, "", 1, 0, "C")
                self.cell(30, 7, "", 1, 0, "C")

                for _ in range(10):
                    self.cell(10, 7, "", 1, 0, "C")

                self.ln()

            date += datetime.timedelta(days=1)

    def add_text_box(self, height):
        self.cell(0, height, "", 1, 1, "")
