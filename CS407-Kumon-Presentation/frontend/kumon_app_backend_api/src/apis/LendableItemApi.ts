/* tslint:disable */
/* eslint-disable */
/**
 * Kumon App - Backend API
 * Backend API for the Kumon Centre Management app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LendableItemEdit,
    LendableItemEditFromJSON,
    LendableItemEditToJSON,
    LendableItemEditRequest,
    LendableItemEditRequestFromJSON,
    LendableItemEditRequestToJSON,
    LendableItemView,
    LendableItemViewFromJSON,
    LendableItemViewToJSON,
    PaginatedLendableItemViewList,
    PaginatedLendableItemViewListFromJSON,
    PaginatedLendableItemViewListToJSON,
    PatchedLendableItemEditRequest,
    PatchedLendableItemEditRequestFromJSON,
    PatchedLendableItemEditRequestToJSON,
} from '../models';

export interface LendableItemCreateRequest {
    lendableItemEditRequest: LendableItemEditRequest;
}

export interface LendableItemDestroyRequest {
    id: number;
}

export interface LendableItemListRequest {
    page?: number;
    search?: string;
}

export interface LendableItemPartialUpdateRequest {
    id: number;
    patchedLendableItemEditRequest?: PatchedLendableItemEditRequest;
}

export interface LendableItemRetrieveRequest {
    id: number;
}

export interface LendableItemUpdateRequest {
    id: number;
    lendableItemEditRequest: LendableItemEditRequest;
}

/**
 * 
 */
export class LendableItemApi extends runtime.BaseAPI {

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemCreateRaw(requestParameters: LendableItemCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LendableItemEdit>> {
        if (requestParameters.lendableItemEditRequest === null || requestParameters.lendableItemEditRequest === undefined) {
            throw new runtime.RequiredError('lendableItemEditRequest','Required parameter requestParameters.lendableItemEditRequest was null or undefined when calling lendableItemCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/lendable-item/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LendableItemEditRequestToJSON(requestParameters.lendableItemEditRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendableItemEditFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemCreate(requestParameters: LendableItemCreateRequest, initOverrides?: RequestInit): Promise<LendableItemEdit> {
        const response = await this.lendableItemCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemDestroyRaw(requestParameters: LendableItemDestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lendableItemDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/lendable-item/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemDestroy(requestParameters: LendableItemDestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.lendableItemDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemListRaw(requestParameters: LendableItemListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedLendableItemViewList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/lendable-item/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLendableItemViewListFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemList(requestParameters: LendableItemListRequest, initOverrides?: RequestInit): Promise<PaginatedLendableItemViewList> {
        const response = await this.lendableItemListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemPartialUpdateRaw(requestParameters: LendableItemPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LendableItemEdit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lendableItemPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/lendable-item/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLendableItemEditRequestToJSON(requestParameters.patchedLendableItemEditRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendableItemEditFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemPartialUpdate(requestParameters: LendableItemPartialUpdateRequest, initOverrides?: RequestInit): Promise<LendableItemEdit> {
        const response = await this.lendableItemPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemRetrieveRaw(requestParameters: LendableItemRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LendableItemView>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lendableItemRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/lendable-item/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendableItemViewFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemRetrieve(requestParameters: LendableItemRetrieveRequest, initOverrides?: RequestInit): Promise<LendableItemView> {
        const response = await this.lendableItemRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemUpdateRaw(requestParameters: LendableItemUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LendableItemEdit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lendableItemUpdate.');
        }

        if (requestParameters.lendableItemEditRequest === null || requestParameters.lendableItemEditRequest === undefined) {
            throw new runtime.RequiredError('lendableItemEditRequest','Required parameter requestParameters.lendableItemEditRequest was null or undefined when calling lendableItemUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/lendable-item/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LendableItemEditRequestToJSON(requestParameters.lendableItemEditRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendableItemEditFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lendable items.
     */
    async lendableItemUpdate(requestParameters: LendableItemUpdateRequest, initOverrides?: RequestInit): Promise<LendableItemEdit> {
        const response = await this.lendableItemUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
