/* tslint:disable */
/* eslint-disable */
/**
 * Kumon App - Backend API
 * Backend API for the Kumon Centre Management app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CenterDetails,
    CenterDetailsFromJSON,
    CenterDetailsToJSON,
    CenterDetailsRequest,
    CenterDetailsRequestFromJSON,
    CenterDetailsRequestToJSON,
} from '../models';

export interface CenterDetailsCreateRequest {
    centerDetailsRequest: CenterDetailsRequest;
}

/**
 * 
 */
export class CenterDetailsApi extends runtime.BaseAPI {

    /**
     * Provides API functionality for managing center details.
     */
    async centerDetailsCreateRaw(requestParameters: CenterDetailsCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CenterDetails>> {
        if (requestParameters.centerDetailsRequest === null || requestParameters.centerDetailsRequest === undefined) {
            throw new runtime.RequiredError('centerDetailsRequest','Required parameter requestParameters.centerDetailsRequest was null or undefined when calling centerDetailsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/center-details/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CenterDetailsRequestToJSON(requestParameters.centerDetailsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CenterDetailsFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing center details.
     */
    async centerDetailsCreate(requestParameters: CenterDetailsCreateRequest, initOverrides?: RequestInit): Promise<CenterDetails> {
        const response = await this.centerDetailsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing center details.
     */
    async centerDetailsFetchRetrieveRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CenterDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/center-details/fetch/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CenterDetailsFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing center details.
     */
    async centerDetailsFetchRetrieve(initOverrides?: RequestInit): Promise<CenterDetails> {
        const response = await this.centerDetailsFetchRetrieveRaw(initOverrides);
        return await response.value();
    }

}
