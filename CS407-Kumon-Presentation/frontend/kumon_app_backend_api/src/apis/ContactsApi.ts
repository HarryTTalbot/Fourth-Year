/* tslint:disable */
/* eslint-disable */
/**
 * Kumon App - Backend API
 * Backend API for the Kumon Centre Management app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Contact,
    ContactFromJSON,
    ContactToJSON,
    ContactGetStudents,
    ContactGetStudentsFromJSON,
    ContactGetStudentsToJSON,
    ContactRequest,
    ContactRequestFromJSON,
    ContactRequestToJSON,
    PaginatedContactListList,
    PaginatedContactListListFromJSON,
    PaginatedContactListListToJSON,
    PatchedContactRequest,
    PatchedContactRequestFromJSON,
    PatchedContactRequestToJSON,
} from '../models';

export interface ContactsCreateRequest {
    contactRequest: ContactRequest;
}

export interface ContactsDestroyRequest {
    id: number;
}

export interface ContactsGetStudentsListRequest {
    id: number;
    search?: string;
}

export interface ContactsListRequest {
    page?: number;
    search?: string;
}

export interface ContactsPartialUpdateRequest {
    id: number;
    patchedContactRequest?: PatchedContactRequest;
}

export interface ContactsRetrieveRequest {
    id: number;
}

export interface ContactsUpdateRequest {
    id: number;
    contactRequest: ContactRequest;
}

/**
 * 
 */
export class ContactsApi extends runtime.BaseAPI {

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsCreateRaw(requestParameters: ContactsCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.contactRequest === null || requestParameters.contactRequest === undefined) {
            throw new runtime.RequiredError('contactRequest','Required parameter requestParameters.contactRequest was null or undefined when calling contactsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/contacts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactRequestToJSON(requestParameters.contactRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsCreate(requestParameters: ContactsCreateRequest, initOverrides?: RequestInit): Promise<Contact> {
        const response = await this.contactsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsDestroyRaw(requestParameters: ContactsDestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contactsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/contacts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsDestroy(requestParameters: ContactsDestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.contactsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the students for the specified contact.
     */
    async contactsGetStudentsListRaw(requestParameters: ContactsGetStudentsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ContactGetStudents>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contactsGetStudentsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/contacts/{id}/get_students/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContactGetStudentsFromJSON));
    }

    /**
     * Retrieves the students for the specified contact.
     */
    async contactsGetStudentsList(requestParameters: ContactsGetStudentsListRequest, initOverrides?: RequestInit): Promise<Array<ContactGetStudents>> {
        const response = await this.contactsGetStudentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsListRaw(requestParameters: ContactsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedContactListList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/contacts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedContactListListFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsList(requestParameters: ContactsListRequest, initOverrides?: RequestInit): Promise<PaginatedContactListList> {
        const response = await this.contactsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsPartialUpdateRaw(requestParameters: ContactsPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contactsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/contacts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedContactRequestToJSON(requestParameters.patchedContactRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsPartialUpdate(requestParameters: ContactsPartialUpdateRequest, initOverrides?: RequestInit): Promise<Contact> {
        const response = await this.contactsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsRetrieveRaw(requestParameters: ContactsRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contactsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/contacts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsRetrieve(requestParameters: ContactsRetrieveRequest, initOverrides?: RequestInit): Promise<Contact> {
        const response = await this.contactsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsUpdateRaw(requestParameters: ContactsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contactsUpdate.');
        }

        if (requestParameters.contactRequest === null || requestParameters.contactRequest === undefined) {
            throw new runtime.RequiredError('contactRequest','Required parameter requestParameters.contactRequest was null or undefined when calling contactsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/contacts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContactRequestToJSON(requestParameters.contactRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student contacts information.
     */
    async contactsUpdate(requestParameters: ContactsUpdateRequest, initOverrides?: RequestInit): Promise<Contact> {
        const response = await this.contactsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
