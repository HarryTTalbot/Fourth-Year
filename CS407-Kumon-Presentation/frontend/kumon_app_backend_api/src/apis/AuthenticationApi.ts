/* tslint:disable */
/* eslint-disable */
/**
 * Kumon App - Backend API
 * Backend API for the Kumon Centre Management app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddAccountRequest,
    AddAccountRequestFromJSON,
    AddAccountRequestToJSON,
    AddAdminAccountRequest,
    AddAdminAccountRequestFromJSON,
    AddAdminAccountRequestToJSON,
    AuthToken,
    AuthTokenFromJSON,
    AuthTokenToJSON,
    AuthTokenRequest,
    AuthTokenRequestFromJSON,
    AuthTokenRequestToJSON,
    EditPasswordRequest,
    EditPasswordRequestFromJSON,
    EditPasswordRequestToJSON,
    ForgotAdminPasswordRequest,
    ForgotAdminPasswordRequestFromJSON,
    ForgotAdminPasswordRequestToJSON,
    SetPasswordRequest,
    SetPasswordRequestFromJSON,
    SetPasswordRequestToJSON,
    Staff,
    StaffFromJSON,
    StaffToJSON,
} from '../models';

export interface AuthenticationAdminForgotPasswordCreateRequest {
    forgotAdminPasswordRequest: ForgotAdminPasswordRequest;
}

export interface AuthenticationAdminSetPasswordCreateRequest {
    setPasswordRequest: SetPasswordRequest;
}

export interface AuthenticationEditPasswordCreateRequest {
    editPasswordRequest: EditPasswordRequest;
}

export interface AuthenticationLoginCreateRequest {
    authTokenRequest: AuthTokenRequest;
}

export interface AuthenticationNewAccountCreateRequest {
    addAccountRequest: AddAccountRequest;
}

export interface AuthenticationNewAdminAccountCreateRequest {
    addAdminAccountRequest: AddAdminAccountRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     */
    async authenticationAdminForgotPasswordCreateRaw(requestParameters: AuthenticationAdminForgotPasswordCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.forgotAdminPasswordRequest === null || requestParameters.forgotAdminPasswordRequest === undefined) {
            throw new runtime.RequiredError('forgotAdminPasswordRequest','Required parameter requestParameters.forgotAdminPasswordRequest was null or undefined when calling authenticationAdminForgotPasswordCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/authentication/admin_forgot_password/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotAdminPasswordRequestToJSON(requestParameters.forgotAdminPasswordRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authenticationAdminForgotPasswordCreate(requestParameters: AuthenticationAdminForgotPasswordCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.authenticationAdminForgotPasswordCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authenticationAdminSetPasswordCreateRaw(requestParameters: AuthenticationAdminSetPasswordCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.setPasswordRequest === null || requestParameters.setPasswordRequest === undefined) {
            throw new runtime.RequiredError('setPasswordRequest','Required parameter requestParameters.setPasswordRequest was null or undefined when calling authenticationAdminSetPasswordCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/authentication/admin_set_password/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPasswordRequestToJSON(requestParameters.setPasswordRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authenticationAdminSetPasswordCreate(requestParameters: AuthenticationAdminSetPasswordCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.authenticationAdminSetPasswordCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authenticationEditPasswordCreateRaw(requestParameters: AuthenticationEditPasswordCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.editPasswordRequest === null || requestParameters.editPasswordRequest === undefined) {
            throw new runtime.RequiredError('editPasswordRequest','Required parameter requestParameters.editPasswordRequest was null or undefined when calling authenticationEditPasswordCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/authentication/edit_password/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditPasswordRequestToJSON(requestParameters.editPasswordRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authenticationEditPasswordCreate(requestParameters: AuthenticationEditPasswordCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.authenticationEditPasswordCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authenticationGetLoggedInStaffRetrieveRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Staff>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/authentication/get_logged_in_staff/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     */
    async authenticationGetLoggedInStaffRetrieve(initOverrides?: RequestInit): Promise<Staff> {
        const response = await this.authenticationGetLoggedInStaffRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async authenticationIsSetupRetrieveRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/authentication/is_setup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authenticationIsSetupRetrieve(initOverrides?: RequestInit): Promise<void> {
        await this.authenticationIsSetupRetrieveRaw(initOverrides);
    }

    /**
     */
    async authenticationLoginCreateRaw(requestParameters: AuthenticationLoginCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters.authTokenRequest === null || requestParameters.authTokenRequest === undefined) {
            throw new runtime.RequiredError('authTokenRequest','Required parameter requestParameters.authTokenRequest was null or undefined when calling authenticationLoginCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/authentication/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthTokenRequestToJSON(requestParameters.authTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     */
    async authenticationLoginCreate(requestParameters: AuthenticationLoginCreateRequest, initOverrides?: RequestInit): Promise<AuthToken> {
        const response = await this.authenticationLoginCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authenticationNewAccountCreateRaw(requestParameters: AuthenticationNewAccountCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addAccountRequest === null || requestParameters.addAccountRequest === undefined) {
            throw new runtime.RequiredError('addAccountRequest','Required parameter requestParameters.addAccountRequest was null or undefined when calling authenticationNewAccountCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/authentication/new_account/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAccountRequestToJSON(requestParameters.addAccountRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authenticationNewAccountCreate(requestParameters: AuthenticationNewAccountCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.authenticationNewAccountCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authenticationNewAdminAccountCreateRaw(requestParameters: AuthenticationNewAdminAccountCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addAdminAccountRequest === null || requestParameters.addAdminAccountRequest === undefined) {
            throw new runtime.RequiredError('addAdminAccountRequest','Required parameter requestParameters.addAdminAccountRequest was null or undefined when calling authenticationNewAdminAccountCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/authentication/new_admin_account/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAdminAccountRequestToJSON(requestParameters.addAdminAccountRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authenticationNewAdminAccountCreate(requestParameters: AuthenticationNewAdminAccountCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.authenticationNewAdminAccountCreateRaw(requestParameters, initOverrides);
    }

}
