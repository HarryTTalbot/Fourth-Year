/* tslint:disable */
/* eslint-disable */
/**
 * Kumon App - Backend API
 * Backend API for the Kumon Centre Management app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BulkItem,
    BulkItemFromJSON,
    BulkItemToJSON,
    BulkItemRequest,
    BulkItemRequestFromJSON,
    BulkItemRequestToJSON,
    ItemRestockRequest,
    ItemRestockRequestFromJSON,
    ItemRestockRequestToJSON,
    ItemWithdrawRequest,
    ItemWithdrawRequestFromJSON,
    ItemWithdrawRequestToJSON,
    PaginatedBulkItemList,
    PaginatedBulkItemListFromJSON,
    PaginatedBulkItemListToJSON,
    PaginatedBulkItemLogList,
    PaginatedBulkItemLogListFromJSON,
    PaginatedBulkItemLogListToJSON,
    PatchedBulkItemRequest,
    PatchedBulkItemRequestFromJSON,
    PatchedBulkItemRequestToJSON,
} from '../models';

export interface BulkItemCreateRequest {
    bulkItemRequest: BulkItemRequest;
}

export interface BulkItemDestroyRequest {
    id: number;
}

export interface BulkItemHistoryListRequest {
    id: number;
    page?: number;
    search?: string;
}

export interface BulkItemListRequest {
    page?: number;
    search?: string;
}

export interface BulkItemPartialUpdateRequest {
    id: number;
    patchedBulkItemRequest?: PatchedBulkItemRequest;
}

export interface BulkItemRestockCreateRequest {
    id: number;
    itemRestockRequest: ItemRestockRequest;
}

export interface BulkItemRetrieveRequest {
    id: number;
}

export interface BulkItemUpdateRequest {
    id: number;
    bulkItemRequest: BulkItemRequest;
}

export interface BulkItemWithdrawCreateRequest {
    id: number;
    itemWithdrawRequest: ItemWithdrawRequest;
}

/**
 * 
 */
export class BulkItemApi extends runtime.BaseAPI {

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemCreateRaw(requestParameters: BulkItemCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BulkItem>> {
        if (requestParameters.bulkItemRequest === null || requestParameters.bulkItemRequest === undefined) {
            throw new runtime.RequiredError('bulkItemRequest','Required parameter requestParameters.bulkItemRequest was null or undefined when calling bulkItemCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/bulk-item/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkItemRequestToJSON(requestParameters.bulkItemRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkItemFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemCreate(requestParameters: BulkItemCreateRequest, initOverrides?: RequestInit): Promise<BulkItem> {
        const response = await this.bulkItemCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemDestroyRaw(requestParameters: BulkItemDestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bulkItemDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/bulk-item/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemDestroy(requestParameters: BulkItemDestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.bulkItemDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemHistoryListRaw(requestParameters: BulkItemHistoryListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedBulkItemLogList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bulkItemHistoryList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/bulk-item/{id}/history/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBulkItemLogListFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemHistoryList(requestParameters: BulkItemHistoryListRequest, initOverrides?: RequestInit): Promise<PaginatedBulkItemLogList> {
        const response = await this.bulkItemHistoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemListRaw(requestParameters: BulkItemListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedBulkItemList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/bulk-item/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBulkItemListFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemList(requestParameters: BulkItemListRequest, initOverrides?: RequestInit): Promise<PaginatedBulkItemList> {
        const response = await this.bulkItemListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemPartialUpdateRaw(requestParameters: BulkItemPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BulkItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bulkItemPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/bulk-item/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedBulkItemRequestToJSON(requestParameters.patchedBulkItemRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkItemFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemPartialUpdate(requestParameters: BulkItemPartialUpdateRequest, initOverrides?: RequestInit): Promise<BulkItem> {
        const response = await this.bulkItemPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemRestockCreateRaw(requestParameters: BulkItemRestockCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bulkItemRestockCreate.');
        }

        if (requestParameters.itemRestockRequest === null || requestParameters.itemRestockRequest === undefined) {
            throw new runtime.RequiredError('itemRestockRequest','Required parameter requestParameters.itemRestockRequest was null or undefined when calling bulkItemRestockCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/bulk-item/{id}/restock/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemRestockRequestToJSON(requestParameters.itemRestockRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemRestockCreate(requestParameters: BulkItemRestockCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.bulkItemRestockCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemRetrieveRaw(requestParameters: BulkItemRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BulkItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bulkItemRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/bulk-item/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkItemFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemRetrieve(requestParameters: BulkItemRetrieveRequest, initOverrides?: RequestInit): Promise<BulkItem> {
        const response = await this.bulkItemRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemUpdateRaw(requestParameters: BulkItemUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BulkItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bulkItemUpdate.');
        }

        if (requestParameters.bulkItemRequest === null || requestParameters.bulkItemRequest === undefined) {
            throw new runtime.RequiredError('bulkItemRequest','Required parameter requestParameters.bulkItemRequest was null or undefined when calling bulkItemUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/bulk-item/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BulkItemRequestToJSON(requestParameters.bulkItemRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkItemFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemUpdate(requestParameters: BulkItemUpdateRequest, initOverrides?: RequestInit): Promise<BulkItem> {
        const response = await this.bulkItemUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemWithdrawCreateRaw(requestParameters: BulkItemWithdrawCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bulkItemWithdrawCreate.');
        }

        if (requestParameters.itemWithdrawRequest === null || requestParameters.itemWithdrawRequest === undefined) {
            throw new runtime.RequiredError('itemWithdrawRequest','Required parameter requestParameters.itemWithdrawRequest was null or undefined when calling bulkItemWithdrawCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/bulk-item/{id}/withdraw/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemWithdrawRequestToJSON(requestParameters.itemWithdrawRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides API functionality for managing bulk item inventory.
     */
    async bulkItemWithdrawCreate(requestParameters: BulkItemWithdrawCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.bulkItemWithdrawCreateRaw(requestParameters, initOverrides);
    }

}
