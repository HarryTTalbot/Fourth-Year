/* tslint:disable */
/* eslint-disable */
/**
 * Kumon App - Backend API
 * Backend API for the Kumon Centre Management app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LongTermAbsenceEdit,
    LongTermAbsenceEditFromJSON,
    LongTermAbsenceEditToJSON,
    LongTermAbsenceEditRequest,
    LongTermAbsenceEditRequestFromJSON,
    LongTermAbsenceEditRequestToJSON,
    LongTermAbsenceView,
    LongTermAbsenceViewFromJSON,
    LongTermAbsenceViewToJSON,
    PaginatedLongTermAbsenceViewList,
    PaginatedLongTermAbsenceViewListFromJSON,
    PaginatedLongTermAbsenceViewListToJSON,
    PatchedLongTermAbsenceEditRequest,
    PatchedLongTermAbsenceEditRequestFromJSON,
    PatchedLongTermAbsenceEditRequestToJSON,
} from '../models';

export interface LongTermAbsenceCreateRequest {
    longTermAbsenceEditRequest: LongTermAbsenceEditRequest;
}

export interface LongTermAbsenceDestroyRequest {
    id: number;
}

export interface LongTermAbsenceListRequest {
    page?: number;
}

export interface LongTermAbsencePartialUpdateRequest {
    id: number;
    patchedLongTermAbsenceEditRequest?: PatchedLongTermAbsenceEditRequest;
}

export interface LongTermAbsenceRetrieveRequest {
    id: number;
}

export interface LongTermAbsenceUpdateRequest {
    id: number;
    longTermAbsenceEditRequest: LongTermAbsenceEditRequest;
}

/**
 * 
 */
export class LongTermAbsenceApi extends runtime.BaseAPI {

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceCreateRaw(requestParameters: LongTermAbsenceCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LongTermAbsenceEdit>> {
        if (requestParameters.longTermAbsenceEditRequest === null || requestParameters.longTermAbsenceEditRequest === undefined) {
            throw new runtime.RequiredError('longTermAbsenceEditRequest','Required parameter requestParameters.longTermAbsenceEditRequest was null or undefined when calling longTermAbsenceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/long-term-absence/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LongTermAbsenceEditRequestToJSON(requestParameters.longTermAbsenceEditRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LongTermAbsenceEditFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceCreate(requestParameters: LongTermAbsenceCreateRequest, initOverrides?: RequestInit): Promise<LongTermAbsenceEdit> {
        const response = await this.longTermAbsenceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceDestroyRaw(requestParameters: LongTermAbsenceDestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling longTermAbsenceDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/long-term-absence/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceDestroy(requestParameters: LongTermAbsenceDestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.longTermAbsenceDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceListRaw(requestParameters: LongTermAbsenceListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedLongTermAbsenceViewList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/long-term-absence/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLongTermAbsenceViewListFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceList(requestParameters: LongTermAbsenceListRequest, initOverrides?: RequestInit): Promise<PaginatedLongTermAbsenceViewList> {
        const response = await this.longTermAbsenceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsencePartialUpdateRaw(requestParameters: LongTermAbsencePartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LongTermAbsenceEdit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling longTermAbsencePartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/long-term-absence/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLongTermAbsenceEditRequestToJSON(requestParameters.patchedLongTermAbsenceEditRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LongTermAbsenceEditFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsencePartialUpdate(requestParameters: LongTermAbsencePartialUpdateRequest, initOverrides?: RequestInit): Promise<LongTermAbsenceEdit> {
        const response = await this.longTermAbsencePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceRetrieveRaw(requestParameters: LongTermAbsenceRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LongTermAbsenceView>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling longTermAbsenceRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/long-term-absence/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LongTermAbsenceViewFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceRetrieve(requestParameters: LongTermAbsenceRetrieveRequest, initOverrides?: RequestInit): Promise<LongTermAbsenceView> {
        const response = await this.longTermAbsenceRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceUpdateRaw(requestParameters: LongTermAbsenceUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LongTermAbsenceEdit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling longTermAbsenceUpdate.');
        }

        if (requestParameters.longTermAbsenceEditRequest === null || requestParameters.longTermAbsenceEditRequest === undefined) {
            throw new runtime.RequiredError('longTermAbsenceEditRequest','Required parameter requestParameters.longTermAbsenceEditRequest was null or undefined when calling longTermAbsenceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/long-term-absence/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LongTermAbsenceEditRequestToJSON(requestParameters.longTermAbsenceEditRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LongTermAbsenceEditFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing student long term absences.
     */
    async longTermAbsenceUpdate(requestParameters: LongTermAbsenceUpdateRequest, initOverrides?: RequestInit): Promise<LongTermAbsenceEdit> {
        const response = await this.longTermAbsenceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
