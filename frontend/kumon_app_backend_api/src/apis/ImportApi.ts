/* tslint:disable */
/* eslint-disable */
/**
 * Kumon App - Backend API
 * Backend API for the Kumon Centre Management app.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ModelFile,
    ModelFileFromJSON,
    FileTypeEnum,
    FileTypeEnumFromJSON,
    FileTypeEnumToJSON,
} from '../models';

export interface ImportCreateRequest {
    name: string;
    file: Blob;
    type?: FileTypeEnum;
}

export interface ImportDownloadRetrieveRequest {
    id: number;
}

export interface ImportFirstImportCreateRequest {
    name: string;
    file: Blob;
    type?: FileTypeEnum;
}

/**
 *
 */
export class ImportApi extends runtime.BaseAPI {

    /**
     * Imports data from either a K-SIS export or an existing backup file.
     */
    async importCreateRaw(requestParameters: ImportCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling importCreate.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling importCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.type !== undefined) {
            formParams.append('type', requestParameters.type as any);
                    }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/import/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Imports data from either a K-SIS export or an existing backup file.
     */
    async importCreate(requestParameters: ImportCreateRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.importCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads the import file associated with the given import ID.
     */
    async importDownloadRetrieveRaw(requestParameters: ImportDownloadRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling importDownloadRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/import/{id}/download/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the import file associated with the given import ID.
     */
    async importDownloadRetrieve(requestParameters: ImportDownloadRetrieveRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.importDownloadRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Imports data from  an existing backup file.
     */
    async importFirstImportCreateRaw(requestParameters: ImportFirstImportCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling importFirstImportCreate.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling importFirstImportCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.type !== undefined) {
            formParams.append('type', requestParameters.type as any);
                    }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/import/first_import/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Imports data from  an existing backup file.
     */
    async importFirstImportCreate(requestParameters: ImportFirstImportCreateRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.importFirstImportCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all of the imports that were previously performed on this database.
     */
    async importListRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ModelFile>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/import/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelFileFromJSON));
    }

    /**
     * Lists all of the imports that were previously performed on this database.
     */
    async importList(initOverrides?: RequestInit): Promise<Array<ModelFile>> {
        const response = await this.importListRaw(initOverrides);
        return await response.value();
    }

}
