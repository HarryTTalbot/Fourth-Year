/* tslint:disable */
/* eslint-disable */
/**
 * Kumon App - Backend API
 * Backend API for the Kumon Centre Management app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ItemLoan,
    ItemLoanFromJSON,
    ItemLoanToJSON,
    ItemLoanRequest,
    ItemLoanRequestFromJSON,
    ItemLoanRequestToJSON,
    PaginatedItemLoanList,
    PaginatedItemLoanListFromJSON,
    PaginatedItemLoanListToJSON,
    PaginatedItemLoanLogList,
    PaginatedItemLoanLogListFromJSON,
    PaginatedItemLoanLogListToJSON,
    PatchedItemLoanRequest,
    PatchedItemLoanRequestFromJSON,
    PatchedItemLoanRequestToJSON,
    ReturnItemRequest,
    ReturnItemRequestFromJSON,
    ReturnItemRequestToJSON,
} from '../models';

export interface ItemLoanCreateRequest {
    itemLoanRequest: ItemLoanRequest;
}

export interface ItemLoanDestroyRequest {
    id: number;
}

export interface ItemLoanHistoryListRequest {
    page?: number;
}

export interface ItemLoanListRequest {
    page?: number;
}

export interface ItemLoanPartialUpdateRequest {
    id: number;
    patchedItemLoanRequest?: PatchedItemLoanRequest;
}

export interface ItemLoanRetrieveRequest {
    id: number;
}

export interface ItemLoanReturnItemCreateRequest {
    id: number;
    returnItemRequest: ReturnItemRequest;
}

export interface ItemLoanUpdateRequest {
    id: number;
    itemLoanRequest: ItemLoanRequest;
}

/**
 * 
 */
export class ItemLoanApi extends runtime.BaseAPI {

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanCreateRaw(requestParameters: ItemLoanCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ItemLoan>> {
        if (requestParameters.itemLoanRequest === null || requestParameters.itemLoanRequest === undefined) {
            throw new runtime.RequiredError('itemLoanRequest','Required parameter requestParameters.itemLoanRequest was null or undefined when calling itemLoanCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/item-loan/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemLoanRequestToJSON(requestParameters.itemLoanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemLoanFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanCreate(requestParameters: ItemLoanCreateRequest, initOverrides?: RequestInit): Promise<ItemLoan> {
        const response = await this.itemLoanCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanDestroyRaw(requestParameters: ItemLoanDestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemLoanDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/item-loan/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanDestroy(requestParameters: ItemLoanDestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.itemLoanDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanHistoryListRaw(requestParameters: ItemLoanHistoryListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedItemLoanLogList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/item-loan/history/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedItemLoanLogListFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanHistoryList(requestParameters: ItemLoanHistoryListRequest, initOverrides?: RequestInit): Promise<PaginatedItemLoanLogList> {
        const response = await this.itemLoanHistoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanListRaw(requestParameters: ItemLoanListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedItemLoanList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/item-loan/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedItemLoanListFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanList(requestParameters: ItemLoanListRequest, initOverrides?: RequestInit): Promise<PaginatedItemLoanList> {
        const response = await this.itemLoanListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanPartialUpdateRaw(requestParameters: ItemLoanPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ItemLoan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemLoanPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/item-loan/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedItemLoanRequestToJSON(requestParameters.patchedItemLoanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemLoanFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanPartialUpdate(requestParameters: ItemLoanPartialUpdateRequest, initOverrides?: RequestInit): Promise<ItemLoan> {
        const response = await this.itemLoanPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanRetrieveRaw(requestParameters: ItemLoanRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ItemLoan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemLoanRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/item-loan/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemLoanFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanRetrieve(requestParameters: ItemLoanRetrieveRequest, initOverrides?: RequestInit): Promise<ItemLoan> {
        const response = await this.itemLoanRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanReturnItemCreateRaw(requestParameters: ItemLoanReturnItemCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemLoanReturnItemCreate.');
        }

        if (requestParameters.returnItemRequest === null || requestParameters.returnItemRequest === undefined) {
            throw new runtime.RequiredError('returnItemRequest','Required parameter requestParameters.returnItemRequest was null or undefined when calling itemLoanReturnItemCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/item-loan/{id}/return_item/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnItemRequestToJSON(requestParameters.returnItemRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanReturnItemCreate(requestParameters: ItemLoanReturnItemCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.itemLoanReturnItemCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanUpdateRaw(requestParameters: ItemLoanUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ItemLoan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemLoanUpdate.');
        }

        if (requestParameters.itemLoanRequest === null || requestParameters.itemLoanRequest === undefined) {
            throw new runtime.RequiredError('itemLoanRequest','Required parameter requestParameters.itemLoanRequest was null or undefined when calling itemLoanUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/item-loan/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemLoanRequestToJSON(requestParameters.itemLoanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemLoanFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for managing lending of lendable items.
     */
    async itemLoanUpdate(requestParameters: ItemLoanUpdateRequest, initOverrides?: RequestInit): Promise<ItemLoan> {
        const response = await this.itemLoanUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
