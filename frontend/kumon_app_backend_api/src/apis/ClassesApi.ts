/* tslint:disable */
/* eslint-disable */
/**
 * Kumon App - Backend API
 * Backend API for the Kumon Centre Management app.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Class,
    ClassFromJSON,
    ClassToJSON,
    ClassRequest,
    ClassRequestFromJSON,
    ClassRequestToJSON,
    ClassStudentsRequest,
    ClassStudentsRequestFromJSON,
    ClassStudentsRequestToJSON,
    PaginatedClassList,
    PaginatedClassListFromJSON,
    PaginatedClassListToJSON,
    PaginatedStudentListList,
    PaginatedStudentListListFromJSON,
    PaginatedStudentListListToJSON,
    PatchedClassRequest,
    PatchedClassRequestFromJSON,
    PatchedClassRequestToJSON,
    StudentList,
    StudentListFromJSON,
    StudentListToJSON,
} from '../models';

export interface ClassesAddStudentsRequest {
    id: number;
    classStudentsRequest: Array<ClassStudentsRequest>;
}

export interface ClassesCreateRequest {
    classRequest: ClassRequest;
}

export interface ClassesDestroyRequest {
    id: number;
}

export interface ClassesGetStudentsListRequest {
    id: number;
    search?: string;
}

export interface ClassesGetStudentsNotInClassListRequest {
    id: number;
    page?: number;
    search?: string;
}

export interface ClassesListRequest {
    page?: number;
    search?: string;
}

export interface ClassesPartialUpdateRequest {
    id: number;
    patchedClassRequest?: PatchedClassRequest;
}

export interface ClassesRemoveStudentsRequest {
    id: number;
    classStudentsRequest: Array<ClassStudentsRequest>;
}

export interface ClassesRetrieveRequest {
    id: number;
}

export interface ClassesSetStudentsRequest {
    id: number;
    classStudentsRequest: Array<ClassStudentsRequest>;
}

export interface ClassesUpdateRequest {
    id: number;
    classRequest: ClassRequest;
}

/**
 * 
 */
export class ClassesApi extends runtime.BaseAPI {

    /**
     * Adds the given students to the specified class.
     */
    async classesAddStudentsRaw(requestParameters: ClassesAddStudentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classesAddStudents.');
        }

        if (requestParameters.classStudentsRequest === null || requestParameters.classStudentsRequest === undefined) {
            throw new runtime.RequiredError('classStudentsRequest','Required parameter requestParameters.classStudentsRequest was null or undefined when calling classesAddStudents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/{id}/add_students/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.classStudentsRequest.map(ClassStudentsRequestToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds the given students to the specified class.
     */
    async classesAddStudents(requestParameters: ClassesAddStudentsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.classesAddStudentsRaw(requestParameters, initOverrides);
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesCreateRaw(requestParameters: ClassesCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Class>> {
        if (requestParameters.classRequest === null || requestParameters.classRequest === undefined) {
            throw new runtime.RequiredError('classRequest','Required parameter requestParameters.classRequest was null or undefined when calling classesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClassRequestToJSON(requestParameters.classRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesCreate(requestParameters: ClassesCreateRequest, initOverrides?: RequestInit): Promise<Class> {
        const response = await this.classesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesDestroyRaw(requestParameters: ClassesDestroyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesDestroy(requestParameters: ClassesDestroyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.classesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the students in the specified class.
     */
    async classesGetStudentsListRaw(requestParameters: ClassesGetStudentsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<StudentList>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classesGetStudentsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/{id}/get_students/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudentListFromJSON));
    }

    /**
     * Gets the students in the specified class.
     */
    async classesGetStudentsList(requestParameters: ClassesGetStudentsListRequest, initOverrides?: RequestInit): Promise<Array<StudentList>> {
        const response = await this.classesGetStudentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the students who are not in the specified class.
     */
    async classesGetStudentsNotInClassListRaw(requestParameters: ClassesGetStudentsNotInClassListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedStudentListList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classesGetStudentsNotInClassList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/{id}/get_students_not_in_class/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedStudentListListFromJSON(jsonValue));
    }

    /**
     * Gets the students who are not in the specified class.
     */
    async classesGetStudentsNotInClassList(requestParameters: ClassesGetStudentsNotInClassListRequest, initOverrides?: RequestInit): Promise<PaginatedStudentListList> {
        const response = await this.classesGetStudentsNotInClassListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesListRaw(requestParameters: ClassesListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaginatedClassList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedClassListFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesList(requestParameters: ClassesListRequest, initOverrides?: RequestInit): Promise<PaginatedClassList> {
        const response = await this.classesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesPartialUpdateRaw(requestParameters: ClassesPartialUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Class>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedClassRequestToJSON(requestParameters.patchedClassRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesPartialUpdate(requestParameters: ClassesPartialUpdateRequest, initOverrides?: RequestInit): Promise<Class> {
        const response = await this.classesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the given students from the specified class.
     */
    async classesRemoveStudentsRaw(requestParameters: ClassesRemoveStudentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classesRemoveStudents.');
        }

        if (requestParameters.classStudentsRequest === null || requestParameters.classStudentsRequest === undefined) {
            throw new runtime.RequiredError('classStudentsRequest','Required parameter requestParameters.classStudentsRequest was null or undefined when calling classesRemoveStudents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/{id}/remove_students/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.classStudentsRequest.map(ClassStudentsRequestToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the given students from the specified class.
     */
    async classesRemoveStudents(requestParameters: ClassesRemoveStudentsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.classesRemoveStudentsRaw(requestParameters, initOverrides);
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesRetrieveRaw(requestParameters: ClassesRetrieveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Class>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesRetrieve(requestParameters: ClassesRetrieveRequest, initOverrides?: RequestInit): Promise<Class> {
        const response = await this.classesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the students for the specified class.
     */
    async classesSetStudentsRaw(requestParameters: ClassesSetStudentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classesSetStudents.');
        }

        if (requestParameters.classStudentsRequest === null || requestParameters.classStudentsRequest === undefined) {
            throw new runtime.RequiredError('classStudentsRequest','Required parameter requestParameters.classStudentsRequest was null or undefined when calling classesSetStudents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/{id}/set_students/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.classStudentsRequest.map(ClassStudentsRequestToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the students for the specified class.
     */
    async classesSetStudents(requestParameters: ClassesSetStudentsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.classesSetStudentsRaw(requestParameters, initOverrides);
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesUpdateRaw(requestParameters: ClassesUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Class>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling classesUpdate.');
        }

        if (requestParameters.classRequest === null || requestParameters.classRequest === undefined) {
            throw new runtime.RequiredError('classRequest','Required parameter requestParameters.classRequest was null or undefined when calling classesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/classes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClassRequestToJSON(requestParameters.classRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassFromJSON(jsonValue));
    }

    /**
     * Provides API functionality for viewing and editing class information.
     */
    async classesUpdate(requestParameters: ClassesUpdateRequest, initOverrides?: RequestInit): Promise<Class> {
        const response = await this.classesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
